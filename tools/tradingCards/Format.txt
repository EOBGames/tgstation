/datum/card
	var/name = "Coder"
	var/desc = "Wow, a mint condition coder card! Better tell the Github all about this!"
	var/icon/state_location = 'icons/obj/tcg.dmi'
	var/icon_state = "runtime"
	var/id = -1 //Unique ID, for use in lookups and storage
	var/power = 0 //How hard this card hits (by default)
	var/resolve = 0 //How hard this card can get hit (by default)
	var/tags = "" //Special tags
	var/cardtype = "" //Cardtype, for use in battles. Arcane/Inept if you don't update this whole block when you finalize the game I will throw you into the sm
	var/rarity = 0 //The rarity of this card in a set, each set must have at least one of all types

//Converter:
I have written a python program to convert human readable into the concentrated format
The goal of this program is to allow a user to insert new cards, and pull out old ones to edit
It can currently directly convert between both formats one file at a time.

//Dreammaker
The file format is readable by Dreammaker. Each line is read in, expanded on by templates, and then turned into a global list
of card datums, which we then referance with an id in that global list to find the datum itself.
The datum is used in the card object init to set a few variables.
If you want to change any of the vars that the datum has during runtime, make a related var the card object and modify it as has been done with names.
Remember, if you do this for all the values, the only benifit to storing datums over strings is filter time and resets.

Oh and remember if you want to use an id to get a datum from the global list, wrap it in "[id]"  before using it as an index

//Identifiers:
\n (Newline) Start a new card definition
|| variable targeting
|0| The first variable's index
|0,Name Reassigns the first variable to Name
|0,Inept$ $ Represents the older variable. So {0} would have a value of "IneptCoder"

//More detailed discription of variables
name //A fluff term displayed to the players
desc //A more detailed fluff term displayed to the players
icon //The icon source of the card
icon_state //The icon state of the card
id //A unique id issued to each card for lookups and storage. May contain any number > 0 that has not yet been used. Templates and cards get thier own pools
power //A statistic used for fights. May contain any number from 0-9 in any amount
resolve //A statistic used for fights. May contain any number from 0-9 in any amount
tags //A tagging system to be used for formulating packs and adding behavior in the future
     //A tag may be any sequence of chars except | or $
     //Stacking tags: To stack tags, place a & between each. For instance |7,CE&NERD|
cardtype //A string that allows us to define the use of the card ingame
rarity //A number used as an index against the pack's rarity table.


//Templates:
A card may inherit from a template by referanceing the template before it's own discription prepended with $.
Such a referance will replace the parent with the template
Templates process top down
Templates can be named by not including a $ before the variable definition
You may not use any regex command characters in your template name
All cards inherit the default template

//Examples:
A basic card that only changes the name and icon_state
|0,Test|3,test|

A basic template that is used by 2 cards
Sec|0,Officer|1,A real piece of work|7,SEC&BMR
$Sec|0,$ Jenkins|
$Sec|0,$ Pluto|

//Human readable
//Identifiers:
\n (Newline) If alone, indecates that the current card def has ended and that we need to start a new one
: Tells the compiler to look for a variable name and value
= The varaiable name is on the right, the value is on the left

//Examples
A normal version of the basic card
:name = Test
:icon_state = test

A normal version of the template example
:template = Sec
:name = Officer
:desc = A real peice of work
:tags = SEC&BMR

:template = $Sec
:name = Jenkins

:template = $Sec
:name = Pluto
